# Copyright 2016-2024 the Advisor Backend team at Red Hat.
# This file is part of the Insights Advisor project.

# Insights Advisor is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.

# Insights Advisor is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with Insights Advisor. If not, see <https://www.gnu.org/licenses/>.

# Generated by Django 4.0.3 on 2022-04-13 01:20

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('publish_date', models.DateTimeField()),
                ('active', models.BooleanField(default=False)),
                ('playbook', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ExecutedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.task')),
                ('org_id', models.CharField(max_length=10)),
                ('initiated_by', models.CharField(help_text='username', max_length=80)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Running'), (2, 'Completed'), (3, 'Cancelled')])),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
            ],
            state_operations=[
                migrations.CreateModel(
                    name='Host',
                    fields=[
                        ('id', models.UUIDField(primary_key=True, serialize=False)),
                        ('account', models.CharField(max_length=10, blank=True, null=True)),
                        ('org_id', models.CharField(max_length=10)),
                        ('display_name', models.CharField(max_length=200)),
                        ('tags', django.contrib.postgres.fields.jsonb.JSONField()),
                        ('updated', models.DateTimeField()),
                        ('created', models.DateTimeField()),
                        ('stale_timestamp', models.DateTimeField()),
                        ('stale_warning_timestamp', models.DateTimeField()),
                        ('culled_timestamp', models.DateTimeField()),
                        ('system_profile', django.contrib.postgres.fields.jsonb.JSONField()),
                        ('insights_id', models.UUIDField()),
                    ],
                    options={
                        'db_table': '"inventory"."hosts"',
                        'managed': False,
                    },
                ),
            ]
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_id', models.UUIDField()),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Running'), (2, 'Success'), (3, 'Failure'), (4, 'Timeout'), (5, 'Cancelled')])),
                ('results', models.JSONField()),
                ('updated_on', models.DateTimeField()),
                ('executed_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.executedtask')),
                ('run_id', models.UUIDField()),
            ],
        ),
    ]
