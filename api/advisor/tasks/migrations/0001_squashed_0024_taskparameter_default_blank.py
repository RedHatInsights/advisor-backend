# Copyright 2016-2024 the Advisor Backend team at Red Hat.
# This file is part of the Insights Advisor project.

# Insights Advisor is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.

# Insights Advisor is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with Insights Advisor. If not, see <https://www.gnu.org/licenses/>.

# Generated by Django 5.2.3 on 2025-06-18 00:26

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.migrations.operations.special
import django.db.models.deletion
import uuid
from django.db import migrations, models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# tasks.migrations.0008_executed_task_add_token
# tasks.migrations.0015_task_type_bash_to_script
# tasks.migrations.0016_alter_executedtaskparameter_options_and_more
# tasks.migrations.0018_delete_empty_executed_tasks
# tasks.migrations.0019_task_parameter_values
# tasks.migrations.0020_taskparameter_title
# tasks.migrations.0023_alter_executedtaskparameter_options_and_more

class Migration(migrations.Migration):

    replaces = [
        ('tasks', '0001_tasks_initial'),
        ('tasks', '0002_satelliterhc'),
        ('tasks', '0003_executedtask_is_org_admin'),
        ('tasks', '0004_expand_org_id'),
        ('tasks', '0005_cleanup_running_tasks'),
        ('tasks', '0006_task_add_type_field'),
        ('tasks', '0007_tasks_add_parameters'),
        ('tasks', '0008_executed_task_add_token'),
        ('tasks', '0009_executed_task_add_name'),
        ('tasks', '0010_task_timeout'),
        ('tasks', '0011_alter_executedtaskparameter_value'),
        ('tasks', '0012_task_filters_array'),
        ('tasks', '0013_job_log'),
        ('tasks', '0014_job_add_stdout_field'),
        ('tasks', '0015_task_type_bash_to_script'),
        ('tasks', '0016_alter_executedtaskparameter_options_and_more'),
        ('tasks', '0017_job_rhc_client_id'),
        ('tasks', '0018_delete_empty_executed_tasks'),
        ('tasks', '0019_task_parameter_values'),
        ('tasks', '0020_taskparameter_title'),
        ('tasks', '0021_taskparameter_multi_valued'),
        ('tasks', '0022_alter_taskparameter_key'),
        ('tasks', '0023_alter_executedtaskparameter_options_and_more'),
        ('tasks', '0024_taskparameter_default_blank')
    ]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('A', 'Ansible'), ('S', 'Script')], default='A', max_length=1)),
                ('slug', models.SlugField(unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('publish_date', models.DateTimeField()),
                ('active', models.BooleanField(default=False)),
                ('playbook', models.TextField()),
                ('timeout', models.PositiveIntegerField(default=3600)),
                ('filter_message', models.CharField(max_length=200, null=True)),
                ('filters', django.contrib.postgres.fields.ArrayField(
                    base_field=models.SlugField(max_length=40), default=list, size=None
                )),
            ],
        ),
        migrations.CreateModel(
            name='ExecutedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.task')),
                ('org_id', models.CharField(max_length=50)),
                ('initiated_by', models.CharField(help_text='username', max_length=80)),
                ('is_org_admin', models.BooleanField(default=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Running'), (2, 'Completed'), (3, 'Completed With Errors'), (4, 'Failure'), (5, 'Cancelled')])),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name='Host',
                    fields=[
                        ('id', models.UUIDField(primary_key=True, serialize=False)),
                        ('account', models.CharField(blank=True, max_length=10, null=True)),
                        ('org_id', models.CharField(max_length=10)),
                        ('display_name', models.CharField(max_length=200)),
                        ('tags', django.contrib.postgres.fields.jsonb.JSONField()),
                        ('updated', models.DateTimeField()),
                        ('created', models.DateTimeField()),
                        ('stale_timestamp', models.DateTimeField()),
                        ('stale_warning_timestamp', models.DateTimeField()),
                        ('culled_timestamp', models.DateTimeField()),
                        ('system_profile', django.contrib.postgres.fields.jsonb.JSONField()),
                        ('insights_id', models.UUIDField()),
                    ],
                    options={
                        'db_table': '"inventory"."hosts"',
                        'managed': False,
                    },
                ),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_id', models.UUIDField()),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Running'), (2, 'Success'), (3, 'Failure'), (4, 'Timeout'), (5, 'Cancelled')])),
                ('results', models.JSONField()),
                ('updated_on', models.DateTimeField()),
                ('executed_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.executedtask')),
                ('run_id', models.UUIDField()),
                ('stdout', models.TextField(blank=True, default='')),
                ('rhc_client_id', models.UUIDField(db_index=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='JobLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_ok', models.BooleanField(default=True)),
                ('line', models.CharField(max_length=255)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log', to='tasks.job')),
            ],
        ),
        migrations.CreateModel(
            name='SatelliteRhc',
            fields=[
                ('instance_id', models.UUIDField(primary_key=True, serialize=False)),
                ('source_id', models.BigIntegerField(unique=True)),
                ('rhc_client_id', models.UUIDField(db_index=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taskparameters', to='tasks.task')),
                ('key', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=250)),
                ('values', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=250), size=None)),
                ('default', models.CharField(blank=True, max_length=250, null=True)),
                ('description', models.TextField()),
                ('required', models.BooleanField(default=False)),
                ('multi_valued', models.BooleanField(default=False)),
                ('index', models.PositiveIntegerField(default=1)),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='ExecutedTaskParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, max_length=250)),
                ('executed_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='tasks.executedtask')),
                ('parameter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.taskparameter')),
            ],
            options={
                'unique_together': {('executed_task', 'parameter')},
                'ordering': ['parameter__index'],
            },
        ),

        migrations.AddConstraint(
            model_name='taskparameter',
            constraint=models.UniqueConstraint(fields=('task', 'index'), name='taskparameter_task_index_uniqueness'),
        ),
    ]
