# Copyright 2016-2024 the Advisor Backend team at Red Hat.
# This file is part of the Insights Advisor project.

# Insights Advisor is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.

# Insights Advisor is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
# more details.

# You should have received a copy of the GNU General Public License along
# with Insights Advisor. If not, see <https://www.gnu.org/licenses/>.

"""
Django settings for advisor project.

Generated by 'django-admin startproject' using Django 2.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import importlib
import sys

from prometheus_client import Info
from logging_conf import LOGGING  # noqa
from app_common_python import LoadedConfig


def string_to_bool(s):
    return s.lower() in ("yes", "true", "t", "1")


# Define the APP_NAME
# Currently only used for defining the Django psycopg2 application_name options
APP_NAME = "insights-advisor-api"

# Use unittest-xml-reporting for test runs
TEST_RUNNER = 'project_settings.testrunner.CyndiTestRunner'
TEST_OUTPUT_DIR = './test_reports'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SESSION_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
ENV_NAME = os.getenv('ENV_NAME', 'local')  # "prod" in prod and "stage" in stage
ENVIRONMENT = os.getenv('ADVISOR_ENV', 'dev')  # "prod" in stage and prod
DEBUG = ENVIRONMENT in ('dev', 'ci', 'qa')
TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'

_DEFAULT_ALLOWED_HOSTS = ",".join([
    'testserver', 'insights-advisor-api', 'advisor-api', 'localhost', '127.0.0.1',
    '.insights.openshiftapps.com', '.svc.cluster.local'
])

# Advisor API path definitions
API_VERSION = '1'
API_BASE_PATH = os.getenv('PATH_PREFIX', 'api/')
PLATFORM_BASE_PATH = os.getenv('PLATFORM_BASE_PATH', 'r/insights/platform/')
ADVISOR_PATH_NAME = os.getenv('ADVISOR_PATH_NAME', 'insights')

API_PATH_PREFIX = f'{API_BASE_PATH}{ADVISOR_PATH_NAME}/v{API_VERSION}/'
PLATFORM_PATH_PREFIX = f'{PLATFORM_BASE_PATH}{ADVISOR_PATH_NAME}/v{API_VERSION}/'
SAT_COMPAT_BASE_PATH = 'r/insights'
SAT_COMPAT_PATH_PREFIX_V1 = f'{SAT_COMPAT_BASE_PATH}/v1/'
SAT_COMPAT_PATH_PREFIX_V2 = f'{SAT_COMPAT_BASE_PATH}/v2/'
SAT_COMPAT_PATH_PREFIX_V3 = f'{SAT_COMPAT_BASE_PATH}/v3/'

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", _DEFAULT_ALLOWED_HOSTS).split(",")

USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
if ENVIRONMENT != 'dev':
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# Tasks API path definitions
TASKS_API_VERSION = '1'
TASKS_PATH_NAME = os.getenv('TASKS_PATH_NAME', 'tasks')
TASKS_PATH_PREFIX = f'{API_BASE_PATH}{TASKS_PATH_NAME}/v{TASKS_API_VERSION}/'
PDAPI_PSK = os.getenv('PDAPI_PSK')


# RBAC settings
RBAC_ENABLED = string_to_bool(os.getenv("RBAC_ENABLED", "false"))
if RBAC_ENABLED:
    RBAC_URL = os.getenv('RBAC_URL')
else:
    RBAC_URL = None
RBAC_PSK = os.getenv("RBAC_PSK")
RBAC_CLIENT_ID = os.getenv("RBAC_CLIENT_ID", "advisor")
KESSEL_ENABLED = string_to_bool(os.getenv("KESSEL_ENABLED", "false"))
# Note: tests assume that host='device under test' mean 'use the TestZedClient'.
KESSEL_URL = os.getenv('KESSEL_URL', 'device under test')
KESSEL_AUTH_ENABLED = string_to_bool(os.getenv("KESSEL_AUTH_ENABLED", "false"))
KESSEL_AUTH_CLIENT_ID = os.getenv("KESSEL_AUTH_CLIENT_ID", "")
KESSEL_AUTH_CLIENT_SECRET = os.getenv("KESSEL_AUTH_CLIENT_SECRET", "")
KESSEL_AUTH_OIDC_ISSUER = os.getenv("KESSEL_AUTH_OIDC_ISSUER", "")
KESSEL_INSECURE = string_to_bool(os.getenv("KESSEL_INSECURE", "true"))

# Middleware settings
MIDDLEWARE_HOST_URL = os.getenv('MIDDLEWARE_HOST_URL')
MIDDLEWARE_CERT_FILE = os.getenv(
    'MIDDLEWARE_CERT_FILE', './api/certs/backoffice-proxy.ca.crt'
)

# Set 'REQUESTS_CA_BUNDLE' to the location of the backoffice proxy CA list.
MIDDLEWARE_API_TOKEN = os.getenv('MIDDLEWARE_API_TOKEN', 'PROXY_TOKEN')
MIDDLEWARE_CLIENT_ID = os.getenv('MIDDLEWARE_CLIENT_ID', 'insights-advisor-mailer')

# Just a hostname, not actually a url - following the convention from remediations
PLATFORM_HOSTNAME_URL = os.getenv('PLATFORM_HOSTNAME_URL', 'cert.console.stage.redhat.com')
CLOUD_CONNECTOR_HOST = os.getenv('CLOUD_CONNECTOR_HOST')
CLOUD_CONNECTOR_PORT = os.getenv('CLOUD_CONNECTOR_PORT')

# Batch size when starting or cancelling jobs on hosts in Tasks.
TASKS_API_BATCH_SIZE = int(os.getenv('TASKS_BATCH_SIZE', '50'))

# Rewrite URL links in internal tasks HTML documents - temporary(?) workaround hack for RHINENG-7966
TASKS_REWRITE_INTERNAL_URLS = string_to_bool(os.getenv('TASKS_REWRITE_INTERNAL_URLS', 'false'))
TASKS_REWRITE_INTERNAL_URLS_FOR = os.getenv('TASKS_REWRITE_INTERNAL_URLS_FOR', 'internal.console.')

SPLUNK_URL = "https://http-inputs-rhcorporate.splunkcloud.com/services/collector/event"
SPLUNK_TOKEN = os.getenv('SPLUNK_HEC_TOKEN', '')
ENABLE_SPLUNK_HEC = string_to_bool(os.getenv('ENABLE_SPLUNK_HEC', 'false'))


def build_endpoint_url(ep):
    protocol = 'https' if LoadedConfig.tlsCAPath else 'http'
    port = ep.tlsPort if LoadedConfig.tlsCAPath else ep.port
    return f"{protocol}://{ep.hostname}:{port}"


# Do clowder specifics
if os.getenv("CLOWDER_ENABLED", "").lower() == "true":
    endpoints = {ep.app: ep for ep in LoadedConfig.endpoints}
    inv_host = endpoints['host-inventory']
    INVENTORY_SERVER_URL = f"{build_endpoint_url(inv_host)}/api/inventory/v1"

    rbac_host = endpoints['rbac']
    RBAC_URL = build_endpoint_url(rbac_host)

    pd_host = endpoints.get('playbook-dispatcher')
    if pd_host:
        PLAYBOOK_DISPATCHER_URL = build_endpoint_url(pd_host)
    else:
        PLAYBOOK_DISPATCHER_URL = "http://localhost"
    sources_host = endpoints.get('sources-api')
    if sources_host:
        SOURCES_API_URL = build_endpoint_url(sources_host)
    else:
        SOURCES_API_URL = "http://localhost"

else:
    INVENTORY_SERVER_URL = os.environ.get('INVENTORY_SERVER_URL')
    PLAYBOOK_DISPATCHER_URL = os.getenv('PLAYBOOK_DISPATCHER_URL')
    SOURCES_API_URL = os.environ.get('SOURCES_API_URL')


# setup kafka group id
GROUP_ID = os.environ.get('GROUP_ID', 'tasks_callback')

# sources
SOURCE_API_ACCOUNT = '540155'
SOURCE_API_ORG = '1979710'

# Remediations settings
REMEDIATIONS_URL = os.getenv('REMEDIATIONS_URL')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_spectacular',
    'django_prometheus',
    'api.apps.ApiConfig',
    'sat_compat.apps.ApiConfig',
    'tasks.apps.TasksConfig',
]
# Only ask for DRF spectacular sidecar if it's installed
if importlib.util.find_spec('drf_spectacular_sidecar'):
    INSTALLED_APPS.append('drf_spectacular_sidecar')

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'middleware.feature_flags_context.feature_flags_context',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.request_storage.request_storage',
    'middleware.sat_compat_deprecated_headers.satellite_compatibility_api_deprecated',
    'middleware.tasks_rewrite_internal_urls.rewrite_urls',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]

ROOT_URLCONF = 'project_settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project_settings.wsgi.application'

# Define the Django psycopg2 options
# This allows us to insert the application name for metadata
DJANGO_DB_OPTIONS = {'application_name': APP_NAME}

# Add SSL configuration from environment variables
if os.getenv('ADVISOR_DB_SSL_MODE'):
    DJANGO_DB_OPTIONS["sslmode"] = os.getenv('ADVISOR_DB_SSL_MODE')

if os.getenv('ADVISOR_DB_SSL_CA'):
    DJANGO_DB_OPTIONS["sslrootcert"] = os.getenv('ADVISOR_DB_SSL_CA')

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
db = LoadedConfig.database
if os.getenv("CLOWDER_ENABLED", "").lower() == "true":
    if db.rdsCa:
        DJANGO_DB_OPTIONS["sslmode"] = "require"
        DJANGO_DB_OPTIONS["sslrootcert"] = LoadedConfig.rds_ca()
    DATABASES = {
        'default': {
            'ENGINE': 'db_backends',
            'HOST': db.hostname,
            'PORT': db.port,  # PORT_NUM to avoid name collision in Openshift
            'NAME': db.name,
            'USER': db.username,
            'PASSWORD': db.password,
            'OPTIONS': DJANGO_DB_OPTIONS
        },
        'readonly': {
            'ENGINE': 'db_backends',
            'HOST': db.hostname,
            'PORT': db.port,  # PORT_NUM to avoid name collision in Openshift
            'NAME': db.name,
            'USER': db.username,
            'PASSWORD': db.password,
            'OPTIONS': DJANGO_DB_OPTIONS
        },
    }
    PROMETHEUS_PATH = os.getenv('PROMETHEUS_PATH', LoadedConfig.metricsPath.lstrip('/'))
    PROMETHEUS_PORT = os.getenv('PROMETHEUS_PORT', LoadedConfig.metricsPort)
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('ADVISOR_DB_ENGINE', 'db_backends'),
            'HOST': os.getenv('ADVISOR_DB_HOST', ''),  # '' allows local socket connection
            'PORT': os.getenv('ADVISOR_DB_PORT_NUM', ''),  # PORT_NUM to avoid name collision in Openshift
            'NAME': os.getenv('ADVISOR_DB_NAME', 'insightsapi'),
            'USER': os.getenv('ADVISOR_DB_USER', 'insightsapi'),
            'PASSWORD': os.getenv('ADVISOR_DB_PASSWORD', 'InsightsData'),
            'OPTIONS': DJANGO_DB_OPTIONS
        },
        'readonly': {
            'ENGINE': os.getenv('ADVISOR_DB_ENGINE', 'db_backends'),
            'HOST': os.getenv('ADVISOR_DB_READONLY_HOST') or os.getenv('ADVISOR_DB_HOST', ''),
            'PORT': os.getenv('ADVISOR_DB_PORT_NUM', ''),  # PORT_NUM to avoid name collision in Openshift
            'NAME': os.getenv('ADVISOR_DB_NAME', 'insightsapi'),
            'USER': os.getenv('ADVISOR_DB_USER', 'insightsapi'),
            'PASSWORD': os.getenv('ADVISOR_DB_PASSWORD', 'InsightsData'),
            'OPTIONS': DJANGO_DB_OPTIONS
        },
    }
    PROMETHEUS_PATH = os.getenv('PROMETHEUS_PATH', 'metrics')
    PROMETHEUS_PORT = os.getenv('PROMETHEUS_PORT', 8000)

# if the prometheus port is not 8000 then export
if PROMETHEUS_PORT != 8000:
    PROMETHEUS_METRICS_EXPORT_PORT = int(PROMETHEUS_PORT)
PROMETHEUS_METRICS_EXPORT_ADDRESS = '0.0.0.0'  # listen on all addresses

DATABASE_ROUTERS = ['project_settings.db_routing.ReadOnlyReplicaRouter']

ATOMIC_REQUESTS = True
CONN_MAX_AGE = 60

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL', '/apps/insights/')
STATIC_ROOT = os.getenv('STATIC_ROOT', '/tmp/static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "frontend/"),
]

# Django REST framework configuration
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    # Use Insights RBAC authentication and permissions throughout
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'api.permissions.RHIdentityAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'api.permissions.InsightsRBACPermission',
    ],
    'DEFAULT_PAGINATION_CLASS': 'api.utils.CustomPageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Spectacular schema generation settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Insights Advisor API',
    'DESCRIPTION': 'The API of the Advisor project in Insights',
    'VERSION': '1.0.1',
    'SERVE_INCLUDE_SCHEMA': False,
    # Serves all accessible endpoints; False = only those the user can see
    'SERVE_PUBLIC': True,
    # Sidecar settings for local use, ignored in production:
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
}
# Have to do this after the above to get the description
SPECTACULAR_SETTINGS['SERVERS'] = [
    {'url': url, 'description': SPECTACULAR_SETTINGS['DESCRIPTION']}
    for url in (
        ['http://localhost:8000/'] if DEBUG else [
            'https://console.redhat.com/',
        ]
    )
]

# Add to prometheus metrics the Advisor version info (when running in OpenShift)
ADVISOR_API_VERSION = Info(
    'insights_advisor_api_version',
    'Release and versioning information'
)

BUILD_NAME = os.getenv('OPENSHIFT_BUILD_NAME', 'dev')
BUILD_ID = os.getenv('OPENSHIFT_BUILD_COMMIT', 'dev')
BUILD_REF = os.getenv('OPENSHIFT_BUILD_REFERENCE', '')
BUILD_STABLE = "-stable" if BUILD_REF == "stable" else ""

if BUILD_ID != 'dev':
    BUILD_URL = ''.join(["https://console.insights-dev.openshift.com/console/",
                         "project/buildfactory/browse/builds/insights-advisor-api",
                         BUILD_STABLE, "/", BUILD_NAME, "?tab=logs"])
    COMMIT_URL = ("https://github.com/RedHatInsights/insights-advisor-api/commit/" + BUILD_ID)
else:
    BUILD_URL = "dev"
    COMMIT_URL = "dev"

ADVISOR_API_VERSION.info({'build_name': BUILD_NAME,
                          'build_commit': BUILD_ID,
                          'build_ref': BUILD_REF,
                          'build_url': BUILD_URL,
                          'commit_url': COMMIT_URL})

EMAIL_HOST = os.getenv('MAIL_HOST', 'mail.corp.redhat.com')

AUTOACK = {
    'TAG': 'autoack',
    'CREATED_BY': 'Red Hat Insights',
    'JUSTIFICATION': 'Disabled by default - enable to begin detection'
}

# Increase max request sizes for content-server posting content to Advisor
DATA_UPLOAD_MAX_MEMORY_SIZE = 20000000  # Content currently about 5M bytes
DATA_UPLOAD_MAX_NUMBER_FIELDS = 200000  # Content currently about 40000 fields

# Enable Auto-Subscription endpoint
ENABLE_AUTOSUB = string_to_bool(os.getenv("ENABLE_AUTOSUB", "false"))

# Feature Flags
if os.getenv("CLOWDER_ENABLED", "").lower() == "true":
    unleash = LoadedConfig.featureFlags
    if unleash:
        UNLEASH_TOKEN = unleash.clientAccessToken
        UNLEASH_URL = f"{unleash.scheme.value}://{unleash.hostname}:{unleash.port}/api"
    else:
        UNLEASH_TOKEN = os.getenv("UNLEASH_TOKEN")
        UNLEASH_URL = os.getenv("UNLEASH_URL")
else:
    UNLEASH_TOKEN = os.getenv("UNLEASH_TOKEN", "*:*.advisor")
    UNLEASH_URL = os.getenv("UNLEASH_URL", "http://localhost:4242/api")

UNLEASH_APP_NAME = os.getenv("UNLEASH_APP_NAME", APP_NAME)
UNLEASH_CACHE_DIRECTORY = os.getenv("UNLEASH_CACHE_DIR", "/tmp/unleashcache")
UNLEASH_REFRESH_INTERVAL = os.getenv("UNLEASH_REFRESH_INTERVAL", 5)
UNLEASH_FAKE_INITIALIZE = string_to_bool(os.getenv("UNLEASH_FAKE_INITIALIZE", "true"))

# HBI settings for the logical replication
HBI_PUBLICATION = os.getenv("HBI_PUBLICATION", "hbi_hosts_pub_v1_0_2")
HBI_SUBSCRIPTION = os.getenv("HBI_SUBSCRIPTION", "advisor_hosts_sub_v1_0_2")
HBI_DROP_SUBSCRIPTION = os.getenv("HBI_DROP_SUBSCRIPTION", "")
HBI_DROP_TABLES = os.getenv("HBI_DROP_TABLES", "false").lower() == "true"
HBI_SSL_MODE = os.getenv("HBI_SSL_MODE", "")
HBI_TABLES_NUM_PARTITIONS = int(os.getenv("HBI_TABLES_NUM_PARTITIONS", 1))
